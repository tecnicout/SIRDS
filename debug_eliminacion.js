const { query } = require('./backend/config/database');

async function debugEliminacion() {
    try {
        console.log('üîç Debugueando proceso de eliminaci√≥n...\n');
        
        const ubicacionId = 1; // Planta Principal Bogot√°
        
        // Verificar √°reas relacionadas
        console.log('1. Verificando √°reas relacionadas...');
        const countSql = 'SELECT COUNT(*) as count FROM area WHERE id_ubicacion = ?';
        const countResult = await query(countSql, [ubicacionId]);
        console.log(`   √Åreas encontradas: ${countResult[0].count}`);
        
        // Listar √°reas espec√≠ficas
        const areasSql = 'SELECT id_area, nombre_area FROM area WHERE id_ubicacion = ?';
        const areasResult = await query(areasSql, [ubicacionId]);
        console.log('   √Åreas espec√≠ficas:');
        areasResult.forEach(area => {
            console.log(`     - ${area.nombre_area} (ID: ${area.id_area})`);
        });
        
        // Probar desvinculaci√≥n manual
        console.log('\n2. Probando desvinculaci√≥n manual...');
        const unlinkSql = 'UPDATE area SET id_ubicacion = NULL WHERE id_ubicacion = ?';
        const unlinkResult = await query(unlinkSql, [ubicacionId]);
        console.log(`   Filas afectadas: ${unlinkResult.affectedRows}`);
        
        // Verificar que se desvincularon
        const verifyCountResult = await query(countSql, [ubicacionId]);
        console.log(`   √Åreas que quedan vinculadas: ${verifyCountResult[0].count}`);
        
        // Probar eliminaci√≥n
        console.log('\n3. Probando eliminaci√≥n de ubicaci√≥n...');
        const deleteSql = 'DELETE FROM ubicacion WHERE id_ubicacion = ?';
        const deleteResult = await query(deleteSql, [ubicacionId]);
        console.log(`   Eliminaci√≥n exitosa: ${deleteResult.affectedRows > 0}`);
        
        if (deleteResult.affectedRows > 0) {
            console.log('‚úÖ √âXITO: Ubicaci√≥n eliminada correctamente');
        } else {
            console.log('‚ùå ERROR: No se pudo eliminar la ubicaci√≥n');
        }
        
    } catch (error) {
        console.error('‚ùå Error durante debug:', error.message);
        console.error('   Stack:', error.stack);
    } finally {
        process.exit(0);
    }
}

debugEliminacion();