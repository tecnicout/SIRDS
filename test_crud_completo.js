const { query } = require('./backend/config/database');

async function pruebasCRUDCompletas() {
    try {
        console.log('üß™ INICIANDO PRUEBAS CRUD COMPLETAS DEL M√ìDULO UBICACI√ìN');
        console.log('=' .repeat(60));
        
        // PRUEBA 1: LISTAR UBICACIONES
        console.log('\n1Ô∏è‚É£ PRUEBA: Listar todas las ubicaciones');
        const ubicacionesInicial = await query('SELECT * FROM ubicacion ORDER BY nombre');
        console.log(`   ‚úÖ Total ubicaciones: ${ubicacionesInicial.length}`);
        ubicacionesInicial.forEach(ub => {
            console.log(`   üìç ${ub.nombre} (${ub.tipo}) - ID: ${ub.id_ubicacion}`);
        });
        
        // PRUEBA 2: CREAR NUEVA UBICACI√ìN
        console.log('\n2Ô∏è‚É£ PRUEBA: Crear nueva ubicaci√≥n');
        const nuevaUbicacion = {
            nombre: `Ubicaci√≥n Test ${Date.now()}`,
            tipo: 'bodega',
            direccion: 'Direcci√≥n de prueba para testing'
        };
        
        const insertSql = 'INSERT INTO ubicacion (nombre, tipo, direccion) VALUES (?, ?, ?)';
        const insertResult = await query(insertSql, [nuevaUbicacion.nombre, nuevaUbicacion.tipo, nuevaUbicacion.direccion]);
        const nuevaId = insertResult.insertId;
        
        console.log(`   ‚úÖ Ubicaci√≥n creada exitosamente - ID: ${nuevaId}`);
        
        // PRUEBA 3: OBTENER UBICACI√ìN POR ID
        console.log('\n3Ô∏è‚É£ PRUEBA: Obtener ubicaci√≥n por ID');
        const ubicacionCreada = await query('SELECT * FROM ubicacion WHERE id_ubicacion = ?', [nuevaId]);
        if (ubicacionCreada.length > 0) {
            console.log(`   ‚úÖ Ubicaci√≥n encontrada: ${ubicacionCreada[0].nombre}`);
            console.log(`   üìç Tipo: ${ubicacionCreada[0].tipo}, Direcci√≥n: ${ubicacionCreada[0].direccion}`);
        } else {
            console.log(`   ‚ùå No se encontr√≥ la ubicaci√≥n con ID: ${nuevaId}`);
        }
        
        // PRUEBA 4: ACTUALIZAR UBICACI√ìN
        console.log('\n4Ô∏è‚É£ PRUEBA: Actualizar ubicaci√≥n');
        const datosActualizados = {
            nombre: `${nuevaUbicacion.nombre} - ACTUALIZADA`,
            tipo: 'planta',
            direccion: 'Direcci√≥n actualizada durante prueba'
        };
        
        const updateSql = 'UPDATE ubicacion SET nombre = ?, tipo = ?, direccion = ? WHERE id_ubicacion = ?';
        const updateResult = await query(updateSql, [datosActualizados.nombre, datosActualizados.tipo, datosActualizados.direccion, nuevaId]);
        
        if (updateResult.affectedRows > 0) {
            console.log(`   ‚úÖ Ubicaci√≥n actualizada exitosamente`);
            
            // Verificar actualizaci√≥n
            const ubicacionActualizada = await query('SELECT * FROM ubicacion WHERE id_ubicacion = ?', [nuevaId]);
            console.log(`   üìç Nuevo nombre: ${ubicacionActualizada[0].nombre}`);
            console.log(`   üìç Nuevo tipo: ${ubicacionActualizada[0].tipo}`);
        } else {
            console.log(`   ‚ùå No se pudo actualizar la ubicaci√≥n`);
        }
        
        // PRUEBA 5: VERIFICAR INTEGRIDAD CON √ÅREAS
        console.log('\n5Ô∏è‚É£ PRUEBA: Verificar integridad con √°reas');
        
        // Crear √°rea de prueba vinculada a la nueva ubicaci√≥n
        const insertAreaSql = 'INSERT INTO area (nombre_area, id_ubicacion, estado) VALUES (?, ?, ?)';
        const areaResult = await query(insertAreaSql, [`√Årea Test ${Date.now()}`, nuevaId, 'activa']);
        const nuevaAreaId = areaResult.insertId;
        
        console.log(`   ‚úÖ √Årea de prueba creada - ID: ${nuevaAreaId}`);
        
        // Verificar relaci√≥n
        const relacionSql = `
            SELECT a.nombre_area, u.nombre as ubicacion_nombre 
            FROM area a 
            INNER JOIN ubicacion u ON a.id_ubicacion = u.id_ubicacion 
            WHERE a.id_area = ?
        `;
        const relacion = await query(relacionSql, [nuevaAreaId]);
        
        if (relacion.length > 0) {
            console.log(`   ‚úÖ Relaci√≥n verificada: ${relacion[0].nombre_area} -> ${relacion[0].ubicacion_nombre}`);
        }
        
        // PRUEBA 6: ELIMINAR UBICACI√ìN CON √ÅREAS (funcionalidad principal)
        console.log('\n6Ô∏è‚É£ PRUEBA: Eliminar ubicaci√≥n con √°reas relacionadas');
        
        // Contar √°reas antes
        const areasAntes = await query('SELECT COUNT(*) as count FROM area WHERE id_ubicacion = ?', [nuevaId]);
        console.log(`   üìä √Åreas relacionadas antes: ${areasAntes[0].count}`);
        
        // Buscar o crear ubicaci√≥n temporal
        let ubicacionTemporal = await query("SELECT id_ubicacion FROM ubicacion WHERE nombre = 'UBICACI√ìN TEMPORAL - REASIGNADA' LIMIT 1");
        
        if (ubicacionTemporal.length === 0) {
            const insertTempSql = `INSERT INTO ubicacion (nombre, tipo, direccion) VALUES ('UBICACI√ìN TEMPORAL - REASIGNADA', 'bodega', '√Åreas reasignadas temporalmente por eliminaci√≥n de ubicaci√≥n')`;
            const tempResult = await query(insertTempSql);
            ubicacionTemporal = [{ id_ubicacion: tempResult.insertId }];
        }
        
        const idTemporal = ubicacionTemporal[0].id_ubicacion;
        console.log(`   üìç Ubicaci√≥n temporal: ID ${idTemporal}`);
        
        // Reasignar √°reas
        const reassignSql = 'UPDATE area SET id_ubicacion = ? WHERE id_ubicacion = ?';
        const reassignResult = await query(reassignSql, [idTemporal, nuevaId]);
        console.log(`   ‚úÖ √Åreas reasignadas: ${reassignResult.affectedRows}`);
        
        // Eliminar ubicaci√≥n
        const deleteSql = 'DELETE FROM ubicacion WHERE id_ubicacion = ?';
        const deleteResult = await query(deleteSql, [nuevaId]);
        
        if (deleteResult.affectedRows > 0) {
            console.log(`   ‚úÖ Ubicaci√≥n eliminada exitosamente`);
            
            // Verificar que las √°reas se reasignaron correctamente
            const areasReasignadas = await query('SELECT COUNT(*) as count FROM area WHERE id_ubicacion = ? AND id_area = ?', [idTemporal, nuevaAreaId]);
            console.log(`   ‚úÖ √Åreas correctamente reasignadas: ${areasReasignadas[0].count}`);
            
        } else {
            console.log(`   ‚ùå No se pudo eliminar la ubicaci√≥n`);
        }
        
        // PRUEBA 7: LIMPIAR DATOS DE PRUEBA
        console.log('\n7Ô∏è‚É£ LIMPIEZA: Eliminando datos de prueba');
        await query('DELETE FROM area WHERE id_area = ?', [nuevaAreaId]);
        console.log(`   üßπ √Årea de prueba eliminada`);
        
        // RESUMEN FINAL
        console.log('\n' + '=' .repeat(60));
        console.log('üìã RESUMEN DE PRUEBAS CRUD - M√ìDULO UBICACI√ìN');
        console.log('=' .repeat(60));
        console.log('‚úÖ 1. Listar ubicaciones - EXITOSO');
        console.log('‚úÖ 2. Crear ubicaci√≥n - EXITOSO');
        console.log('‚úÖ 3. Obtener por ID - EXITOSO');
        console.log('‚úÖ 4. Actualizar ubicaci√≥n - EXITOSO');
        console.log('‚úÖ 5. Verificar integridad con √°reas - EXITOSO');
        console.log('‚úÖ 6. Eliminar con reasignaci√≥n de √°reas - EXITOSO');
        console.log('‚úÖ 7. Limpieza de datos - EXITOSO');
        console.log('\nüéâ TODAS LAS PRUEBAS PASARON EXITOSAMENTE');
        console.log('üîí La integridad de datos se mantiene correctamente');
        
    } catch (error) {
        console.error('‚ùå Error durante las pruebas:', error.message);
        console.error('Stack:', error.stack);
    } finally {
        process.exit(0);
    }
}

pruebasCRUDCompletas();