const fetch = require('node-fetch');

async function probarIntegridadDatos() {
    try {
        console.log('üîê Haciendo login...');
        
        // Login
        const loginResponse = await fetch('http://localhost:3001/api/auth/login', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                email: 'murcia21.gmz@gmail.com',
                password: '123456'
            })
        });
        
        const loginResult = await loginResponse.json();
        
        if (!loginResult.success) {
            throw new Error('Login fall√≥: ' + loginResult.message);
        }
        
        const token = loginResult.data.token;
        console.log('‚úÖ Login exitoso');
        
        console.log('\nüìä Verificando relaciones ubicaci√≥n-√°rea...');
        
        // Obtener ubicaciones con √°reas
        const ubicacionesResponse = await fetch('http://localhost:3001/api/ubicaciones', {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        
        const ubicacionesResult = await ubicacionesResponse.json();
        
        if (!ubicacionesResult.success) {
            throw new Error('Error al obtener ubicaciones');
        }
        
        console.log(`üìç Ubicaciones encontradas: ${ubicacionesResult.data.length}`);
        
        // Buscar una ubicaci√≥n que tenga √°reas relacionadas
        const ubicacionConAreas = ubicacionesResult.data.find(ub => ub.id_ubicacion === 1); // Planta Principal Bogot√°
        
        if (!ubicacionConAreas) {
            console.log('‚ùå No se encontr√≥ la ubicaci√≥n de prueba (ID: 1)');
            return;
        }
        
        console.log(`üîç Probando con ubicaci√≥n: ${ubicacionConAreas.nombre} (ID: ${ubicacionConAreas.id_ubicacion})`);
        
        // Verificar √°reas relacionadas ANTES de eliminar
        console.log('\nüìä Consultando √°reas relacionadas antes de eliminar...');
        const areasResponse = await fetch('http://localhost:3001/api/areas', {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        
        const areasResult = await areasResponse.json();
        const areasRelacionadas = areasResult.data ? 
            areasResult.data.filter(area => area.id_ubicacion === ubicacionConAreas.id_ubicacion) : [];
        
        console.log(`üîó √Åreas relacionadas encontradas: ${areasRelacionadas.length}`);
        areasRelacionadas.forEach(area => {
            console.log(`   - ${area.nombre_area} (ID: ${area.id_area})`);
        });
        
        if (areasRelacionadas.length === 0) {
            console.log('‚ö†Ô∏è Esta ubicaci√≥n no tiene √°reas relacionadas. Creando √°rea de prueba...');
            
            // Crear √°rea de prueba vinculada a esta ubicaci√≥n
            const createAreaResponse = await fetch('http://localhost:3001/api/areas', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    nombre_area: `√Årea Test ${Date.now()}`,
                    id_ubicacion: ubicacionConAreas.id_ubicacion
                })
            });
            
            const createAreaResult = await createAreaResponse.json();
            
            if (createAreaResult.success) {
                console.log(`‚úÖ √Årea de prueba creada: ID ${createAreaResult.data.id}`);
            } else {
                console.log(`‚ùå Error al crear √°rea: ${createAreaResult.message}`);
            }
        }
        
        console.log('\nüóëÔ∏è Probando eliminaci√≥n de ubicaci√≥n con √°reas relacionadas...');
        
        // Intentar eliminar la ubicaci√≥n
        const deleteResponse = await fetch(`http://localhost:3001/api/ubicaciones/${ubicacionConAreas.id_ubicacion}`, {
            method: 'DELETE',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        
        const deleteResult = await deleteResponse.json();
        
        console.log(`\nüìã Resultado de eliminaci√≥n:`);
        console.log(`Status: ${deleteResponse.status}`);
        console.log(`Success: ${deleteResult.success}`);
        console.log(`Message: ${deleteResult.message}`);
        
        if (deleteResult.data) {
            console.log(`√Åreas desvinculadas: ${deleteResult.data.areasDesvinculadas}`);
        }
        
        if (deleteResult.success) {
            console.log('‚úÖ √âXITO: Ubicaci√≥n eliminada correctamente respetando integridad');
            
            // Verificar que la ubicaci√≥n se elimin√≥
            const verifyResponse = await fetch(`http://localhost:3001/api/ubicaciones/${ubicacionConAreas.id_ubicacion}`, {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });
            
            if (verifyResponse.status === 404) {
                console.log('‚úÖ Confirmado: Ubicaci√≥n efectivamente eliminada');
            }
            
            // Verificar que las √°reas se desvincularon correctamente
            if (areasRelacionadas.length > 0) {
                console.log('\nüîç Verificando desvinculaci√≥n de √°reas...');
                
                const areasAfterResponse = await fetch('http://localhost:3001/api/areas', {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });
                
                const areasAfterResult = await areasAfterResponse.json();
                const areasDespues = areasAfterResult.data ? 
                    areasAfterResult.data.filter(area => 
                        areasRelacionadas.some(ar => ar.id_area === area.id_area)
                    ) : [];
                
                const areasDesvinculadasCorrectamente = areasDespues.filter(area => area.id_ubicacion === null);
                
                console.log(`‚úÖ √Åreas desvinculadas correctamente: ${areasDesvinculadasCorrectamente.length}/${areasRelacionadas.length}`);
            }
            
        } else {
            console.log('‚ùå FALLO: Error al eliminar ubicaci√≥n');
            console.log('   Esto puede indicar un problema de integridad referencial');
        }
        
    } catch (error) {
        console.error('‚ùå Error:', error.message);
    } finally {
        process.exit(0);
    }
}

probarIntegridadDatos();